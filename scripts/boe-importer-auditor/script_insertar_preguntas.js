require("dotenv").config();
const { createClient } = require('@supabase/supabase-js');
const OpenAI = require('openai');
const fs = require('fs');

// Configuraci√≥n
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
  timeout: 60000
});

// Array para guardar errores de art√≠culos no encontrados
const erroresArticulosNoEncontrados = [];

// ‚úÖ FUNCI√ìN: Mapear nombres de leyes del JSON a los short_name de la BD
function mapearNombreLey(nombreLeyJSON) {
  const mapeoLeyes = {
    'Constituci√≥n Espa√±ola': 'CE',
    'Ley 39/2015': 'Ley 39/2015',
    'Ley 29/1998': 'Ley 29/1998', 
    'Ley 40/2015': 'Ley 40/2015'
  };
  
  return mapeoLeyes[nombreLeyJSON] || nombreLeyJSON;
}

// ‚úÖ FUNCI√ìN: Normalizar n√∫mero de art√≠culo (quitar subapartados)
function normalizarNumeroArticulo(articuloNumber) {
  // Si tiene punto, quitar todo despu√©s del punto
  // Ejemplo: "76.1" ‚Üí "76", "43.3" ‚Üí "43"
  if (articuloNumber && articuloNumber.includes('.')) {
    return articuloNumber.split('.')[0];
  }
  return articuloNumber;
}

// ‚úÖ FUNCI√ìN: Verificar si pregunta ya existe (ANTES de generar explicaci√≥n)
async function verificarPreguntaExistente(pregunta) {
  try {
    const { data, error } = await supabase
      .from('questions')
      .select('id, primary_article_id, articles!inner(article_number, title, laws!inner(short_name))')
      .eq('question_text', pregunta.pregunta)
      .single();

    if (error && error.code === 'PGRST116') {
      // No encontrada - no existe
      return { existe: false };
    }
    
    if (error) {
      throw error;
    }

    // Pregunta existe
    return {
      existe: true,
      preguntaId: data.id,
      articuloAsignado: {
        numero: data.articles.article_number,
        titulo: data.articles.title,
        ley: data.articles.laws.short_name
      }
    };
  } catch (error) {
    console.error('Error verificando pregunta existente:', error);
    return { existe: false };
  }
}

// Funci√≥n para cargar preguntas desde JSON
function cargarPreguntasDesdeJSON(rutaJSON) {
  try {
    console.log(`üìÑ Cargando preguntas desde: ${rutaJSON}`);
    
    if (!fs.existsSync(rutaJSON)) {
      throw new Error(`El archivo JSON no existe: ${rutaJSON}`);
    }
    
    const jsonContent = fs.readFileSync(rutaJSON, 'utf8');
    const data = JSON.parse(jsonContent);
    
    console.log(`‚úÖ Cargadas ${data.preguntas.length} preguntas`);
    console.log(`üìä A√±os incluidos: ${data.metadata.a√±os_incluidos.join(', ')}`);
    
    // Convertir formato a nuestro formato interno
    const preguntasConvertidas = data.preguntas.map(p => {
      // Convertir respuesta_correcta de letra a √≠ndice
      const letraAIndice = { 'a': 0, 'b': 1, 'c': 2, 'd': 3 };
      const correcta = letraAIndice[p.respuesta_correcta.toLowerCase()];
      
      return {
        numero: p.numero,
        a√±o: p.a√±o_examen,
        pregunta: p.pregunta,
        opciones: [p.opciones.a, p.opciones.b, p.opciones.c, p.opciones.d],
        correcta: correcta,
        ley_mencionada: p.ley_mencionada,
        articulo_mencionado: p.articulo || null
      };
    });
    
    return preguntasConvertidas;
    
  } catch (error) {
    console.error('‚ùå Error cargando JSON:', error.message);
    return [];
  }
}

// Funci√≥n para generar explicaci√≥n educativa con GPT
async function generarExplicacionEducativa(pregunta, articuloContent, leyName, articuloNumber) {
  try {
    // ‚úÖ USAR NOMBRE MAPEADO EN EL PROMPT
    const shortNameLey = mapearNombreLey(leyName);
    
    const prompt = `
Eres un experto en derecho administrativo. Genera una explicaci√≥n educativa para esta pregunta de examen oficial:

PREGUNTA: "${pregunta.pregunta}"
OPCIONES: ${pregunta.opciones.map((op, i) => `${String.fromCharCode(97 + i)}) ${op}`).join('\n')}
RESPUESTA CORRECTA: ${String.fromCharCode(97 + pregunta.correcta)}) ${pregunta.opciones[pregunta.correcta]}

ART√çCULO CORRESPONDIENTE:
Ley: ${shortNameLey}
Art√≠culo: ${articuloNumber}
Contenido: "${articuloContent}"

INSTRUCCIONES:
1. Cita el art√≠culo espec√≠fico y su contenido literal relevante (usando comillas)
2. Explica el razonamiento jur√≠dico de por qu√© esa respuesta es correcta
3. Conecta la pregunta con la ley de forma clara y educativa
4. M√°ximo 200 palabras
5. Usa un lenguaje claro pero t√©cnicamente preciso

FORMATO: P√°rrafo explicativo sin comillas externas ni markdown.

EJEMPLO:
"El art√≠culo X de la Ley Y establece que 'contenido literal relevante'. Por tanto, [explicaci√≥n del razonamiento]..."
`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.1,
      max_tokens: 300
    });

    let explicacion = response.choices[0].message.content.trim();
    
    // Limpiar markdown si aparece
    if (explicacion.startsWith('```') || explicacion.startsWith('"')) {
      explicacion = explicacion.replace(/^```[a-z]*\s*/, '').replace(/```\s*$/, '');
      explicacion = explicacion.replace(/^"/, '').replace(/"$/, '');
    }

    return explicacion;
  } catch (error) {
    console.error('Error generando explicaci√≥n educativa:', error);
    // ‚úÖ USAR NOMBRE MAPEADO EN FALLBACK TAMBI√âN
    const shortNameLey = mapearNombreLey(leyName);
    return `Seg√∫n el art√≠culo ${articuloNumber} de ${shortNameLey}, la respuesta correcta es: ${pregunta.opciones[pregunta.correcta]}. Para m√°s detalles, consulte el contenido completo del art√≠culo.`;
  }
}

// Funci√≥n para sugerir art√≠culo usando GPT
async function sugerirArticuloConGPT(pregunta) {
  try {
    const prompt = `
Analiza esta pregunta de examen oficial y sugiere QU√â ART√çCULO ESPEC√çFICO de la ley mencionada podr√≠a responder a esta pregunta:

PREGUNTA: "${pregunta.pregunta}"
OPCIONES: ${pregunta.opciones.map((op, i) => `${String.fromCharCode(97 + i)}) ${op}`).join('\n')}
LEY MENCIONADA: ${pregunta.ley_mencionada}

Responde SOLO con un JSON sin markdown:
{
  "articulo_sugerido": "n√∫mero del art√≠culo",
  "confianza": 0-100,
  "razon": "breve explicaci√≥n de por qu√© este art√≠culo"
}

IMPORTANTE:
- Solo sugiere el N√öMERO del art√≠culo (ej: "35", "21", "4 bis")
- Si no est√°s seguro, pon confianza baja
- Si no sabes, pon articulo_sugerido: null
- NO uses bloques de c√≥digo markdown
`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.1,
      max_tokens: 300
    });

    let content = response.choices[0].message.content.trim();
    
    // Limpiar markdown si aparece
    if (content.startsWith('```json')) {
      content = content.replace(/^```json\s*/, '').replace(/```\s*$/, '');
    }
    if (content.startsWith('```')) {
      content = content.replace(/^```\s*/, '').replace(/```\s*$/, '');
    }

    return JSON.parse(content);
  } catch (error) {
    console.error('Error sugiriendo art√≠culo con GPT:', error);
    return { articulo_sugerido: null, confianza: 0, razon: "Error en sugerencia" };
  }
}

// Funci√≥n para verificar correspondencia con GPT
async function verificarCorrespondenciaConGPT(pregunta, articuloContent, leyName, articuloNumber) {
  try {
    const prompt = `
Analiza si esta pregunta de examen oficial corresponde al contenido del art√≠culo proporcionado:

PREGUNTA: "${pregunta.pregunta}"
OPCIONES: ${pregunta.opciones.map((op, i) => `${String.fromCharCode(97 + i)}) ${op}`).join('\n')}
RESPUESTA CORRECTA: ${String.fromCharCode(97 + pregunta.correcta)}) ${pregunta.opciones[pregunta.correcta]}

ART√çCULO A VERIFICAR:
Ley: ${leyName}
Art√≠culo: ${articuloNumber}
Contenido: "${articuloContent}"

AN√ÅLISIS REQUERIDO:
1. ¬øEl tema de la pregunta corresponde exactamente al contenido del art√≠culo?
2. ¬øLa respuesta correcta est√° fundamentada en este art√≠culo espec√≠fico?
3. ¬øHay alguna discrepancia entre la pregunta y el art√≠culo?

Responde SOLO con un JSON sin markdown:
{
  "corresponde": true/false,
  "confianza": 0-100,
  "razon": "explicaci√≥n breve",
  "articulo_sugerido": "n√∫mero del art√≠culo correcto si no corresponde, o null"
}
`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.1,
      max_tokens: 300
    });

    let content = response.choices[0].message.content.trim();
    
    // Limpiar markdown si aparece
    if (content.startsWith('```json')) {
      content = content.replace(/^```json\s*/, '').replace(/```\s*$/, '');
    }
    if (content.startsWith('```')) {
      content = content.replace(/^```\s*/, '').replace(/```\s*$/, '');
    }

    return JSON.parse(content);
  } catch (error) {
    console.error('Error con GPT:', error);
    return { corresponde: false, confianza: 0, razon: "Error en verificaci√≥n", articulo_sugerido: null };
  }
}

// ‚úÖ FUNCI√ìN CORREGIDA: obtenerArticulo con mapeo de nombres y normalizaci√≥n
async function obtenerArticulo(leyName, articuloNumber) {
  try {
    // ‚úÖ MAPEAR NOMBRE DE LEY
    const shortNameLey = mapearNombreLey(leyName);
    
    // ‚úÖ NORMALIZAR N√öMERO DE ART√çCULO (quitar subapartados)
    const articuloNormalizado = normalizarNumeroArticulo(articuloNumber);
    
    const { data: lawData, error: lawError } = await supabase
      .from('laws')
      .select('id')
      .eq('short_name', shortNameLey)
      .single();

    if (lawError) throw lawError;

    const { data, error } = await supabase
      .from('articles')
      .select('id, content, title')
      .eq('law_id', lawData.id)
      .eq('article_number', articuloNormalizado) // ‚úÖ Usar n√∫mero normalizado
      .single();

    if (error) throw error;
    return data;
  } catch (error) {
    console.error(`Error obteniendo art√≠culo ${articuloNumber} de ${leyName} (mapeado: ${mapearNombreLey(leyName)}, normalizado: ${normalizarNumeroArticulo(articuloNumber)}):`, error);
    return null;
  }
}

// ‚úÖ FUNCI√ìN CORREGIDA: insertarPreguntaConValidacion con verificaci√≥n previa
async function insertarPreguntaConValidacion(pregunta, articuloInfo) {
  try {
    // ‚úÖ VERIFICAR PRIMERO SI YA EXISTE (SIN GENERAR EXPLICACI√ìN)
    console.log(`   üîç Verificando si pregunta ya existe...`);
    const verificacion = await verificarPreguntaExistente(pregunta);
    
    if (verificacion.existe) {
      console.log(`   ‚ö†Ô∏è Pregunta YA EXISTE:`);
      console.log(`      üìö ${verificacion.articuloAsignado.ley} Art. ${verificacion.articuloAsignado.numero}`);
      console.log(`      üìù "${verificacion.articuloAsignado.titulo}"`);
      
      // Comparar si es el mismo art√≠culo
      const articuloActual = verificacion.articuloAsignado.numero;
      const articuloNuevo = normalizarNumeroArticulo(articuloInfo.articuloNumber);
      const leyActual = verificacion.articuloAsignado.ley;
      const leyNueva = mapearNombreLey(pregunta.ley_mencionada);
      
      if (articuloActual === articuloNuevo && leyActual === leyNueva) {
        console.log(`   ‚úÖ MISMO ART√çCULO - Duplicada correcta`);
      } else {
        console.log(`   üéØ INTENTABA insertar en:`);
        console.log(`      üìö ${leyNueva} Art. ${articuloNuevo}`);
        console.log(`      üìù "${articuloInfo.articulo.title}"`);
        console.log(`   ‚ö†Ô∏è ART√çCULO DIFERENTE - Posible problema de asignaci√≥n`);
      }
      
      return { insertada: false, razon: 'Duplicada' };
    }
    
    // ‚úÖ NO EXISTE - AHORA S√ç GENERAR EXPLICACI√ìN
    console.log(`   ü§ñ Generando explicaci√≥n educativa...`);
    const explicacionEducativa = await generarExplicacionEducativa(
      pregunta, 
      articuloInfo.articulo.content, 
      pregunta.ley_mencionada, 
      articuloInfo.articuloNumber
    );
    
    console.log(`   üìù Explicaci√≥n generada: "${explicacionEducativa.substring(0, 100)}..."`);

    // ‚úÖ MAPEAR NOMBRE DE LEY PARA TAGS
    const shortNameLey = mapearNombreLey(pregunta.ley_mencionada);
    
    // Tags sin referencia al tema (se determina por topic_scope)
    const tags = [
      `examen_${pregunta.a√±o}`,           // A√±o del examen: "examen_2016"
      'pregunta_oficial',                 // Marca como pregunta oficial
      'examen_oposicion',                 // Tipo de examen
      'auxiliar_administrativo',          // Puesto de la oposici√≥n
      shortNameLey.toLowerCase().replace(/\s+/g, '_') // ‚úÖ Usar nombre mapeado para tags
    ];
    
    // Si tiene art√≠culo espec√≠fico, a√±adirlo como tag
    if (pregunta.articulo_mencionado) {
      tags.push(`articulo_${pregunta.articulo_mencionado}`);
    }

    const { data, error } = await supabase
      .from('questions')
      .insert({
        primary_article_id: articuloInfo.articulo.id,
        question_text: pregunta.pregunta,
        option_a: pregunta.opciones[0],
        option_b: pregunta.opciones[1],
        option_c: pregunta.opciones[2],
        option_d: pregunta.opciones[3],
        correct_option: pregunta.correcta,
        explanation: explicacionEducativa, // ‚úÖ Usar explicaci√≥n educativa generada por GPT
        difficulty: 'medium',
        question_type: 'single',
        tags: tags,
        is_active: true,
        is_official_exam: true  // true porque son preguntas de ex√°menes oficiales
      });

    if (error) throw error;

    console.log(`   ‚úÖ Pregunta insertada correctamente con explicaci√≥n educativa`);
    console.log(`   üè∑Ô∏è Tags: ${tags.join(', ')}`);
    return { insertada: true, data };
    
  } catch (error) {
    console.error('Error insertando pregunta:', error);
    return { insertada: false, razon: error.message };
  }
}

async function procesarPreguntas() {
  console.log('üöÄ Iniciando proceso de inserci√≥n de preguntas desde JSON...');
  
  // Cargar preguntas desde JSON
  const rutaJSON = './preguntas-tema11-oficiales.json';
  const preguntas = cargarPreguntasDesdeJSON(rutaJSON);
  
  if (preguntas.length === 0) {
    console.error('‚ùå No se pudieron cargar preguntas del JSON');
    return;
  }
  
  console.log(`\nüìö Se procesar√°n ${preguntas.length} preguntas del JSON`);
  console.log(`üîÑ Mapeo de leyes activado: JSON ‚Üí BD`);
  console.log(`   ‚Ä¢ Constituci√≥n Espa√±ola ‚Üí CE`);
  console.log(`   ‚Ä¢ Ley 39/2015 ‚Üí Ley 39/2015`);
  console.log(`   ‚Ä¢ Ley 29/1998 ‚Üí Ley 29/1998`);
  console.log(`   ‚Ä¢ Ley 40/2015 ‚Üí Ley 40/2015`);
  console.log(`üîß Normalizaci√≥n de art√≠culos activada: 76.1 ‚Üí 76, 43.3 ‚Üí 43`);
  
  let procesadas = 0;
  let insertadas = 0;
  let errores = 0;
  let duplicadas = 0;

  for (const pregunta of preguntas) {
    try {
      console.log(`\nüìù Procesando pregunta ${pregunta.a√±o}-${pregunta.numero}...`);
      console.log(`   üìÑ "${pregunta.pregunta.substring(0, 80)}..."`);
      console.log(`   üìä Ley: ${pregunta.ley_mencionada} ‚Üí ${mapearNombreLey(pregunta.ley_mencionada)}`);
      console.log(`   üìä Art√≠culo mencionado: ${pregunta.articulo_mencionado || 'No espec√≠fico'}`);
      
      let resultado = null;
      
      // Caso 1: La pregunta menciona un art√≠culo espec√≠fico
      if (pregunta.articulo_mencionado) {
        const articuloNormalizado = normalizarNumeroArticulo(pregunta.articulo_mencionado);
        console.log(`   üéØ Buscando art√≠culo mencionado: ${mapearNombreLey(pregunta.ley_mencionada)} Art. ${pregunta.articulo_mencionado} ‚Üí ${articuloNormalizado}`);
        const articulo = await obtenerArticulo(pregunta.ley_mencionada, pregunta.articulo_mencionado);
        
        if (!articulo) {
          console.log(`   ‚ùå ERROR: Art√≠culo ${pregunta.articulo_mencionado} ‚Üí ${articuloNormalizado} no existe en BD para ${mapearNombreLey(pregunta.ley_mencionada)}`);
          erroresArticulosNoEncontrados.push({
            pregunta_numero: pregunta.numero,
            a√±o: pregunta.a√±o,
            ley: pregunta.ley_mencionada,
            ley_mapeada: mapearNombreLey(pregunta.ley_mencionada),
            articulo_buscado: pregunta.articulo_mencionado,
            articulo_normalizado: articuloNormalizado,
            tipo_error: 'articulo_mencionado_no_existe',
            timestamp: new Date().toISOString()
          });
          errores++;
          procesadas++;
          continue;
        }
        
        const verificacion = await verificarCorrespondenciaConGPT(
          pregunta, 
          articulo.content, 
          pregunta.ley_mencionada, 
          articuloNormalizado
        );
        
        console.log(`   üìä Verificaci√≥n directa: ${verificacion.confianza}% - ${verificacion.razon}`);
        
        if (verificacion.corresponde && verificacion.confianza > 70) {
          resultado = { 
            articuloNumber: articuloNormalizado, 
            articulo, 
            verificacion 
          };
        }
      }

      // Caso 2: No menciona art√≠culo espec√≠fico, preguntar a GPT
      if (!resultado) {
        console.log('   ü§ñ Preguntando a GPT qu√© art√≠culo podr√≠a ser...');
        const sugerencia = await sugerirArticuloConGPT(pregunta);
        
        if (sugerencia.articulo_sugerido && sugerencia.confianza > 60) {
          const articuloSugeridoNormalizado = normalizarNumeroArticulo(sugerencia.articulo_sugerido);
          console.log(`   üí° GPT sugiere: ${mapearNombreLey(pregunta.ley_mencionada)} Art. ${sugerencia.articulo_sugerido} ‚Üí ${articuloSugeridoNormalizado} (confianza: ${sugerencia.confianza}%)`);
          console.log(`   üí≠ Raz√≥n: ${sugerencia.razon}`);
          
          const articuloSugerido = await obtenerArticulo(pregunta.ley_mencionada, sugerencia.articulo_sugerido);
          
          if (!articuloSugerido) {
            console.log(`   ‚ùå ERROR: Art√≠culo sugerido ${sugerencia.articulo_sugerido} ‚Üí ${articuloSugeridoNormalizado} no existe en BD para ${mapearNombreLey(pregunta.ley_mencionada)}`);
            erroresArticulosNoEncontrados.push({
              pregunta_numero: pregunta.numero,
              a√±o: pregunta.a√±o,
              ley: pregunta.ley_mencionada,
              ley_mapeada: mapearNombreLey(pregunta.ley_mencionada),
              articulo_buscado: sugerencia.articulo_sugerido,
              articulo_normalizado: articuloSugeridoNormalizado,
              tipo_error: 'articulo_sugerido_gpt_no_existe',
              sugerencia_gpt: sugerencia,
              timestamp: new Date().toISOString()
            });
            errores++;
            procesadas++;
            continue;
          }
          
          console.log(`   üîç Verificando art√≠culo sugerido...`);
          const verificacion = await verificarCorrespondenciaConGPT(
            pregunta, 
            articuloSugerido.content, 
            pregunta.ley_mencionada, 
            articuloSugeridoNormalizado
          );
          
          console.log(`   üìä Verificaci√≥n: ${verificacion.confianza}% - ${verificacion.razon}`);
          
          if (verificacion.corresponde && verificacion.confianza > 70) {
            resultado = { 
              articuloNumber: articuloSugeridoNormalizado, 
              articulo: articuloSugerido, 
              verificacion 
            };
          }
        } else {
          console.log(`   ‚ö†Ô∏è GPT no pudo sugerir art√≠culo con confianza suficiente`);
        }
      }

      // Insertar pregunta si encontramos art√≠culo v√°lido
      if (resultado && resultado.verificacion.confianza > 70) {
        console.log(`   ‚úÖ Art√≠culo encontrado: ${mapearNombreLey(pregunta.ley_mencionada)} Art. ${resultado.articuloNumber} (confianza: ${resultado.verificacion.confianza}%)`);
        
        const insercion = await insertarPreguntaConValidacion(pregunta, resultado);
        
        if (insercion.insertada) {
          insertadas++;
        } else if (insercion.razon === 'Duplicada') {
          duplicadas++;
        } else {
          errores++;
        }
      } else {
        console.log(`   ‚ùå No se encontr√≥ art√≠culo correspondiente - SALTANDO PREGUNTA`);
        errores++;
      }

      procesadas++;
      
      // Delay entre preguntas (reducido porque ya no genera explicaciones innecesarias)
      await new Promise(resolve => setTimeout(resolve, 1500)); // 1.5 segundos
      
    } catch (error) {
      console.error(`   üí• Error procesando pregunta ${pregunta.a√±o}-${pregunta.numero}:`, error);
      errores++;
      procesadas++;
    }
  }

  // Resumen final
  console.log('\n' + '='.repeat(50));
  console.log('üìä RESUMEN FINAL:');
  console.log('='.repeat(50));
  console.log(`   üìù Preguntas procesadas: ${procesadas}`);
  console.log(`   ‚úÖ Preguntas insertadas: ${insertadas}`);
  console.log(`   ‚ö†Ô∏è Preguntas duplicadas: ${duplicadas}`);
  console.log(`   ‚ùå Art√≠culos no encontrados: ${erroresArticulosNoEncontrados.length}`);
  console.log(`   ‚ùå Otros errores: ${errores - erroresArticulosNoEncontrados.length}`);
  console.log(`   üìà Tasa de √©xito: ${((insertadas / procesadas) * 100).toFixed(1)}%`);
  console.log(`   üí∞ Tokens GPT ahorrados: ~${duplicadas * 500} (explicaciones no generadas para duplicadas)`);
  console.log('='.repeat(50));
  
  // Guardar errores de art√≠culos no encontrados
  if (erroresArticulosNoEncontrados.length > 0) {
    const errorFile = `errores_articulos_${new Date().toISOString().slice(0,10)}.json`;
    fs.writeFileSync(errorFile, JSON.stringify(erroresArticulosNoEncontrados, null, 2));
    console.log(`üíæ Errores de art√≠culos guardados en: ${errorFile}`);
    
    console.log('\nüìã ART√çCULOS NO ENCONTRADOS:');
    erroresArticulosNoEncontrados.forEach(error => {
      console.log(`   ‚ùå Pregunta ${error.a√±o}-${error.pregunta_numero}: ${error.ley} ‚Üí ${error.ley_mapeada} Art. ${error.articulo_buscado} ‚Üí ${error.articulo_normalizado} (${error.tipo_error})`);
    });
  }
}

async function main() {
  try {
    await procesarPreguntas();
  } catch (error) {
    console.error('üí• Error en ejecuci√≥n principal:', error);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { procesarPreguntas };