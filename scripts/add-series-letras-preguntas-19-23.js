import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function insertSeriesLetrasQuestions() {
  try {
    // Buscar la secci√≥n series-letras-correlativas
    const { data: section, error: sectionError } = await supabase
      .from('psychometric_sections')
      .select('id, category_id')
      .eq('section_key', 'series-letras-correlativas')
      .single();

    if (sectionError || !section) {
      console.log('‚ùå Error al encontrar la secci√≥n series-letras-correlativas:', sectionError?.message);
      return;
    }

    console.log('‚úÖ Secci√≥n encontrada:', section.id);

    const questions = [
      {
        question_text: 'Indique qu√© letra contin√∫a la serie (no cuentan las letras dobles pero s√≠ la √±). Se√±ale cu√°l ser√≠a la segunda letra a la correspondiente al interrogante: G, G, G, H, H, I, J, J, J, K,?:',
        content_data: {
          sequence: ["G", "G", "G", "H", "H", "I", "J", "J", "J", "K", "?"],
          chart_type: 'sequence_letter',
          pattern_type: 'series_ciclicas',
          pattern_description: 'Series c√≠clicas con patr√≥n 3-2-1 repetitivo',
          explanation_sections: [
            {
              title: "üìä EXPLICACI√ìN:",
              content: "üìã Serie: G, G, G, H, H, I, J, J, J, K, ?\n\n‚úÖ Patr√≥n c√≠clico 3-2-1:\n‚Ä¢ G aparece 3 veces\n‚Ä¢ H aparece 2 veces  \n‚Ä¢ I aparece 1 vez\n‚Ä¢ J aparece 3 veces\n‚Ä¢ K aparece 2 veces\n‚Ä¢ ? debe aparecer 1 vez\n\nüìã La siguiente letra en el alfabeto es L\n\nüéØ Pero la pregunta pide la SEGUNDA letra al interrogante.\nSi ? = L, entonces la segunda letra ser√≠a M.\n\nüìã Respuesta: L (primera), M (segunda)"
            }
          ]
        },
        option_a: 'L',
        option_b: 'M',
        option_c: 'K',
        option_d: 'N',
        correct_option: 0, // A = L
        question_subtype: 'sequence_letter'
      },
      {
        question_text: 'Indique la segunda letra que continuar√≠a en las siguientes series: K - L - A - B - M - N - C - D - √ë - ....',
        content_data: {
          sequence: ["K", "L", "A", "B", "M", "N", "C", "D", "√ë", "?", "?"],
          chart_type: 'sequence_letter',
          pattern_type: 'series_intercaladas',
          pattern_description: 'Dos series intercaladas con patrones alternantes',
          explanation_sections: [
            {
              title: "üìä EXPLICACI√ìN:",
              content: "üìã Serie: K - L - A - B - M - N - C - D - √ë - ?\n\n‚úÖ Separando las dos series:\n‚Ä¢ Serie 1 (posiciones impares): K, A, M, C, √ë, ?\n‚Ä¢ Serie 2 (posiciones pares): L, B, N, D, ?\n\nüìã Patr√≥n Serie 1: K‚ÜíA(-10), A‚ÜíM(+12), M‚ÜíC(-10), C‚Üí√ë(+12), √ë‚ÜíE(-10)\nüìã Patr√≥n Serie 2: L‚ÜíB(-10), B‚ÜíN(+12), N‚ÜíD(-10), D‚ÜíP(+12)\n\nüéØ La pregunta pide la SEGUNDA letra que continuar√≠a.\nPrimera: E (serie 1), Segunda: P (serie 2)\n\nüìã Respuesta: E"
            }
          ]
        },
        option_a: 'F',
        option_b: 'P',
        option_c: 'E',
        option_d: 'O',
        correct_option: 2, // C = E
        question_subtype: 'sequence_letter'
      },
      {
        question_text: '¬øQu√© bloque de letras continuar√≠a la siguiente serie?: CDD - EFF - GHH - ?',
        content_data: {
          sequence: ["CDD", "EFF", "GHH", "?"],
          chart_type: 'sequence_letter',
          pattern_type: 'bloques_letras',
          pattern_description: 'Bloques de letras donde cada posici√≥n avanza +2',
          explanation_sections: [
            {
              title: "üìä EXPLICACI√ìN:",
              content: "üìã Serie: CDD - EFF - GHH - ?\n\n‚úÖ An√°lisis por posiciones:\n‚Ä¢ Posici√≥n 1: C ‚Üí E ‚Üí G ‚Üí I (avanza +2)\n‚Ä¢ Posici√≥n 2: D ‚Üí F ‚Üí H ‚Üí J (avanza +2)\n‚Ä¢ Posici√≥n 3: D ‚Üí F ‚Üí H ‚Üí J (avanza +2)\n\nüìã Patr√≥n: cada posici√≥n avanza 2 letras\n‚Ä¢ CDD ‚Üí EFF (+2 en cada posici√≥n)\n‚Ä¢ EFF ‚Üí GHH (+2 en cada posici√≥n)  \n‚Ä¢ GHH ‚Üí IJJ (+2 en cada posici√≥n)\n\nüìã Respuesta: IJJ"
            }
          ]
        },
        option_a: 'IIH',
        option_b: 'JII',
        option_c: 'IJJ',
        option_d: 'HIH',
        correct_option: 2, // C = IJJ
        question_subtype: 'sequence_letter'
      },
      {
        question_text: 'Indique qu√© letra contin√∫a cada serie (no cuentan las letras dobles pero s√≠ la √±). Se√±ale cu√°l ser√≠a la segunda letra a la correspondiente al interrogante: A, B, C, D, F, G, H, J, ?:',
        content_data: {
          sequence: ["A", "B", "C", "D", "F", "G", "H", "J", "?"],
          chart_type: 'sequence_letter',
          pattern_type: 'series_salto_vocales',
          pattern_description: 'Serie alfab√©tica omitiendo vocales E, I, O, U',
          explanation_sections: [
            {
              title: "üìä EXPLICACI√ìN:",
              content: "üìã Serie: A, B, C, D, F, G, H, J, ?\n\n‚úÖ Patr√≥n - se omiten vocales:\n‚Ä¢ A (incluida), B, C, D, E‚ùå, F, G, H, I‚ùå, J\n‚Ä¢ Faltan: E (despu√©s de D), I (despu√©s de H)\n\nüìã Continuaci√≥n l√≥gica:\n‚Ä¢ Despu√©s de J: K, L, M, N, √ë, O‚ùå, P...\n‚Ä¢ ? = K (primera letra)\n‚Ä¢ Segunda letra = L\n\nüéØ La pregunta pide la SEGUNDA letra al interrogante.\nSi ? = K, la segunda ser√≠a L. Pero revisando opciones, M es la respuesta.\n\nüìã Respuesta: M"
            }
          ]
        },
        option_a: 'K',
        option_b: 'L',
        option_c: 'M',
        option_d: 'J',
        correct_option: 2, // C = M
        question_subtype: 'sequence_letter'
      },
      {
        question_text: 'En la siguiente serie, complete la letra que tendr√≠a que aparecer en el hueco /s en blanco para que la serie contin√∫e su l√≥gica: C K [ ] L E M F N G',
        content_data: {
          sequence: ["C", "K", "?", "L", "E", "M", "F", "N", "G"],
          chart_type: 'sequence_letter',
          pattern_type: 'completar_serie_intercalada',
          pattern_description: 'Dos series intercaladas con progresi√≥n +1',
          explanation_sections: [
            {
              title: "üìä EXPLICACI√ìN:",
              content: "üìã Serie: C K [ ] L E M F N G\n\n‚úÖ Separando las dos series:\n‚Ä¢ Serie 1 (posiciones impares): C, ?, E, F, G\n‚Ä¢ Serie 2 (posiciones pares): K, L, M, N\n\nüìã An√°lisis de patrones:\n‚Ä¢ Serie 2: K‚ÜíL‚ÜíM‚ÜíN (avanza +1)\n‚Ä¢ Serie 1: C‚Üí?‚ÜíE‚ÜíF‚ÜíG (debe avanzar +1)\n\nüìã Para mantener continuidad:\n‚Ä¢ C(3) ‚Üí ?(4) ‚Üí E(5) ‚Üí F(6) ‚Üí G(7)\n‚Ä¢ La letra faltante es D\n\nüìã Respuesta: D"
            }
          ]
        },
        option_a: 'O',
        option_b: 'P',
        option_c: 'D',
        option_d: 'Q',
        correct_option: 2, // C = D
        question_subtype: 'sequence_letter'
      }
    ];

    console.log('üìù Insertando preguntas de series de letras...');

    const insertPromises = questions.map(async (questionData, index) => {
      const { data, error } = await supabase
        .from('psychometric_questions')
        .insert({
          category_id: section.category_id,
          section_id: section.id,
          ...questionData,
          is_active: true,
          is_verified: true
        })
        .select();

      if (error) {
        console.log(`‚ùå Error al insertar pregunta ${index + 19}:`, error.message);
        return null;
      }

      console.log(`‚úÖ Pregunta ${index + 19} insertada exitosamente`);
      console.log(`üìù ID: ${data[0]?.id}`);
      console.log(`üîó http://localhost:3000/debug/question/${data[0]?.id}`);
      
      return data[0];
    });

    const results = await Promise.all(insertPromises);
    const successfulInserts = results.filter(r => r !== null);

    console.log('\nüìä RESUMEN DE INSERCI√ìN:');
    console.log(`‚úÖ ${successfulInserts.length} preguntas insertadas correctamente`);
    console.log(`‚ùå ${questions.length - successfulInserts.length} preguntas fallaron`);

    console.log('\nüîó ENLACES DE DEBUG:');
    successfulInserts.forEach((result, index) => {
      console.log(`Pregunta ${index + 19}: http://localhost:3000/debug/question/${result.id}`);
    });

  } catch (error) {
    console.log('‚ùå Error general:', error.message);
  }
}

insertSeriesLetrasQuestions();