import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Faltan variables de entorno NEXT_PUBLIC_SUPABASE_URL o SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function insertLowestMedicalUsageQuestion() {
  try {
    console.log('üîç Buscando secci√≥n de gr√°ficos en capacidad administrativa...')
    
    // Buscar la categor√≠a de capacidad administrativa
    const { data: category, error: categoryError } = await supabase
      .from('psychometric_categories')
      .select('*')
      .eq('category_key', 'capacidad-administrativa')
      .single()

    if (categoryError) {
      console.error('‚ùå Error buscando categor√≠a:', categoryError)
      return
    }

    console.log('‚úÖ Categor√≠a encontrada:', category.display_name)

    // Buscar la secci√≥n de gr√°ficos
    const { data: section, error: sectionError } = await supabase
      .from('psychometric_sections')
      .select('*')
      .eq('category_id', category.id)
      .eq('section_key', 'graficos')
      .single()

    if (sectionError) {
      console.error('‚ùå Error buscando secci√≥n:', sectionError)
      return
    }

    console.log('‚úÖ Secci√≥n encontrada:', section.display_name)

    // Datos de la pregunta
    const questionData = {
      category_id: category.id,
      section_id: section.id,
      question_text: 'Seg√∫n los datos del gr√°fico, ¬øqu√© poblaci√≥n fue la que menos utiliz√≥ los servicios m√©dicos?',
      content_data: {
        chart_type: 'line_chart',
        chart_title: 'Personas atendidas por rango de edad / lugar de la atenci√≥n (en miles) al mes',
        x_axis_label: 'Lugar de atenci√≥n',
        y_axis_label: 'Personas atendidas (miles)',
        categories: ['Centro salud', 'Hospitales', 'Centros especializados', 'Cl√≠nicas privadas'],
        age_groups: [
          {
            label: 'Edad de 1 mes a 14 a√±os',
            values: [80, 30, 70, 50]
          },
          {
            label: 'Edad de 15 a 39 a√±os', 
            values: [40, 20, 30, 20]
          },
          {
            label: 'Edad de 27 a 64 a√±os',
            values: [70, 60, 50, 90] 
          },
          {
            label: 'De 65 a√±os en adelante',
            values: [100, 100, 95, 35]
          }
        ],
        explanation_sections: [
          {
            title: "üí° ¬øQu√© eval√∫a este ejercicio?",
            content: "Capacidad de leer gr√°ficos de l√≠neas m√∫ltiples, calcular totales por series (rangos de edad), comparar resultados y identificar el valor m√≠nimo entre diferentes grupos poblacionales."
          },
          {
            title: "üìä AN√ÅLISIS PASO A PASO:",
            content: "üìã C√°lculo del total por rango de edad:\\n‚Ä¢ Edad 1-14 a√±os: 80 + 30 + 70 + 50 = 230.000 personas\\n‚Ä¢ Edad 15-39 a√±os: 40 + 20 + 30 + 20 = 110.000 personas\\n‚Ä¢ Edad 27-64 a√±os: 70 + 60 + 50 + 90 = 270.000 personas\\n‚Ä¢ Edad 65+ a√±os: 100 + 100 + 95 + 35 = 330.000 personas\\n\\nüìã Comparaci√≥n de totales:\\n‚Ä¢ Edad 1-14 a√±os: 230.000 personas\\n‚Ä¢ Edad 15-39 a√±os: 110.000 personas ‚Üê M√çNIMO ‚úÖ\\n‚Ä¢ Edad 27-64 a√±os: 270.000 personas\\n‚Ä¢ Edad 65+ a√±os: 330.000 personas\\n\\nüìã Resultado:\\n‚Ä¢ El grupo que menos utiliz√≥ servicios m√©dicos: De 15 a√±os a 26 a√±os (aproximadamente)"
          },
          {
            title: "‚ö° T√âCNICAS DE AN√ÅLISIS R√ÅPIDO (Para oposiciones)",
            content: "üîç M√©todo 1: Suma visual por series\\n‚Ä¢ Para cada rango de edad, suma horizontalmente todos los lugares\\n‚Ä¢ Edad 15-39: 40+20+30+20 = 110.000 ‚Üê Claramente el menor ‚úÖ\\n‚Ä¢ Otros rangos son visiblemente mayores\\n\\nüìä M√©todo 2: Identificaci√≥n visual r√°pida\\n‚Ä¢ La l√≠nea amarilla (15-39 a√±os) est√° consistentemente baja\\n‚Ä¢ Es la que tiene valores m√°s peque√±os en la mayor√≠a de lugares\\n‚Ä¢ Confirmar sumando para verificar\\n\\nüí∞ M√©todo 3: Descarte de opciones\\n‚Ä¢ Opci√≥n A: 60+ a√±os - L√≠nea rosa muy alta ‚ùå\\n‚Ä¢ Opci√≥n B: 1-14 a√±os - L√≠nea verde alta ‚ùå\\n‚Ä¢ Opci√≥n C: 27-59 a√±os - L√≠nea negra alta ‚ùå\\n‚Ä¢ Opci√≥n D: 15-26 a√±os - Coincide con 15-39 a√±os ‚úÖ"
          },
          {
            title: "‚ùå Errores comunes a evitar",
            content: "‚Ä¢ Confundir las series y sumar verticalmente (por lugar) en lugar de horizontalmente (por edad)\\n‚Ä¢ No distinguir bien las l√≠neas de colores diferentes\\n‚Ä¢ Errores en la suma de n√∫meros de dos cifras\\n‚Ä¢ Leer mal la escala del eje Y\\n‚Ä¢ Confundir los rangos de edad en las opciones\\n‚Ä¢ No verificar visualmente que el resultado sea l√≥gico"
          },
          {
            title: "üí™ Consejo de oposici√≥n",
            content: "Para encontrar m√≠nimos en gr√°ficos de l√≠neas m√∫ltiples: 1) Suma horizontalmente todos los valores de cada serie, 2) Compara los totales obtenidos, 3) Identifica el menor, 4) Verifica visualmente que esa l√≠nea sea la m√°s baja en general. La l√≠nea amarilla (15-39 a√±os) es claramente la m√°s baja."
          }
        ]
      },
      option_a: 'De 60 a√±os o m√°s.',
      option_b: 'De 1 mes a 14 a√±os.',
      option_c: 'De 27a√±os a 59 a√±os.',
      option_d: 'De 15 a√±os a 26 a√±os.',
      correct_option: 3, // D = De 15 a√±os a 26 a√±os (corresponde al rango 15-39 a√±os con menor total)
      explanation: null, // Se maneja en el componente
      question_subtype: 'line_chart', // Tipo para el switch en PsychometricTestLayout
      difficulty: 'medium',
      time_limit_seconds: 120,
      cognitive_skills: ['chart_reading', 'data_extraction', 'basic_addition', 'comparison', 'minimum_identification'],
      is_active: true,
      is_verified: true
    }

    console.log('üíæ Insertando pregunta de menor uso de servicios m√©dicos...')

    const { data, error } = await supabase
      .from('psychometric_questions')
      .insert([questionData])
      .select()

    if (error) {
      console.error('‚ùå Error insertando pregunta:', error)
      return
    }

    console.log('‚úÖ Pregunta de menor uso de servicios m√©dicos a√±adida exitosamente')
    console.log('üìù ID:', data[0]?.id)
    console.log('‚úÖ Respuesta correcta: De 15 a√±os a 26 a√±os (110.000 personas total)')
    console.log('‚ôªÔ∏è  Reutiliza el componente LineChartQuestion existente - no se necesitan cambios')
    console.log('')
    console.log('üîó REVISAR PREGUNTA VISUALMENTE:')
    console.log(`   http://localhost:3000/debug/question/${data[0]?.id}`)
    console.log('')
    console.log('üîó REVISAR DATOS JSON:')
    console.log(`   http://localhost:3000/api/debug/question/${data[0]?.id}`)

    return data[0]?.id

  } catch (error) {
    console.error('‚ùå Error inesperado:', error)
  }
}

insertLowestMedicalUsageQuestion()