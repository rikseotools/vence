import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Faltan variables de entorno NEXT_PUBLIC_SUPABASE_URL o SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function insertAgeRangePopulationQuestion() {
  try {
    console.log('üîç Buscando secci√≥n de gr√°ficos en capacidad administrativa...')
    
    // Buscar la categor√≠a de capacidad administrativa
    const { data: category, error: categoryError } = await supabase
      .from('psychometric_categories')
      .select('*')
      .eq('category_key', 'capacidad-administrativa')
      .single()

    if (categoryError) {
      console.error('‚ùå Error buscando categor√≠a:', categoryError)
      return
    }

    console.log('‚úÖ Categor√≠a encontrada:', category.display_name)

    // Buscar la secci√≥n de gr√°ficos
    const { data: section, error: sectionError } = await supabase
      .from('psychometric_sections')
      .select('*')
      .eq('category_id', category.id)
      .eq('section_key', 'graficos')
      .single()

    if (sectionError) {
      console.error('‚ùå Error buscando secci√≥n:', sectionError)
      return
    }

    console.log('‚úÖ Secci√≥n encontrada:', section.display_name)

    // Datos de la pregunta
    const questionData = {
      category_id: category.id,
      section_id: section.id,
      question_text: 'Seg√∫n el gr√°fico, ¬øCu√°l ser√≠a la poblaci√≥n total atendida al mes del rango de edad de entre 1 mes y 14 a√±os?',
      content_data: {
        chart_type: 'line_chart',
        chart_title: 'Personas atendidas por rango de edad / lugar de la atenci√≥n (en miles) al mes',
        x_axis_label: 'Lugar de atenci√≥n',
        y_axis_label: 'Personas atendidas (miles)',
        chart_data: {
          type: 'line_chart',
          title: 'Personas atendidas por rango de edad / lugar de la atenci√≥n (en miles) al mes',
          categories: ['Centro salud', 'Hospitales', 'Centros especializados', 'Cl√≠nicas privadas'],
          series: [
            {
              name: 'Edad de 1 mes a 14 a√±os',
              data: [80, 30, 70, 50],
              color: '#ff69b4'
            },
            {
              name: 'Edad de 15 a 39 a√±os',
              data: [40, 20, 30, 20],
              color: '#ffa500'
            },
            {
              name: 'Edad de 27 a 64 a√±os',
              data: [70, 60, 50, 90],
              color: '#333333'
            },
            {
              name: 'De 65 a√±os en adelante',
              data: [100, 100, 95, 35],
              color: '#8a2be2'
            }
          ]
        },
        explanation_sections: [
          {
            title: "üí° ¬øQu√© eval√∫a este ejercicio?",
            content: "Capacidad de leer gr√°ficos de l√≠neas, identificar una serie espec√≠fica de datos, extraer valores de m√∫ltiples puntos y realizar sumas b√°sicas para obtener totales."
          },
          {
            title: "üìä AN√ÅLISIS PASO A PASO:",
            content: "üìã Identificaci√≥n de la serie objetivo:\n‚Ä¢ Buscar la l√≠nea correspondiente a 'Edad de 1 mes a 14 a√±os' (l√≠nea rosa/magenta)\n‚Ä¢ Esta l√≠nea representa los datos que necesitamos sumar\n\nüìã Extracci√≥n de datos por lugar:\n‚Ä¢ Centro salud: 80 (miles de personas)\n‚Ä¢ Hospitales: 30 (miles de personas)\n‚Ä¢ Centros especializados: 70 (miles de personas)\n‚Ä¢ Cl√≠nicas privadas: 50 (miles de personas)\n\nüìã C√°lculo del total:\n‚Ä¢ Total = 80 + 30 + 70 + 50 = 230 (miles de personas)\n‚Ä¢ Resultado: 230.000 personas ‚úÖ"
          },
          {
            title: "‚ö° T√âCNICAS DE AN√ÅLISIS R√ÅPIDO (Para oposiciones)",
            content: "üîç M√©todo 1: Identificaci√≥n visual de la serie\n‚Ä¢ Localiza la leyenda para identificar colores\n‚Ä¢ Sigue la l√≠nea rosa/magenta en todo el gr√°fico\n‚Ä¢ Lee los valores en cada punto de la l√≠nea\n\nüìä M√©todo 2: Suma mental estrat√©gica\n‚Ä¢ Agrupa n√∫meros f√°ciles: (80 + 70) + (30 + 50)\n‚Ä¢ Primera suma: 150, Segunda suma: 80\n‚Ä¢ Total: 150 + 80 = 230 miles = 230.000 personas\n\nüí∞ M√©todo 3: Descarte de opciones\n‚Ä¢ Opci√≥n A: 250.000 - Muy alta ‚ùå\n‚Ä¢ Opci√≥n B: 220.000 - Cerca pero baja ‚ùå\n‚Ä¢ Opci√≥n C: 230.000 - Coincide con c√°lculo ‚úÖ\n‚Ä¢ Opci√≥n D: 240.000 - Muy alta ‚ùå"
          },
          {
            title: "‚ùå Errores comunes a evitar",
            content: "‚Ä¢ Confundir las series de datos (seguir l√≠nea incorrecta)\n‚Ä¢ No identificar correctamente los colores de la leyenda\n‚Ä¢ Leer mal la escala del eje Y (olvidar que est√° en miles)\n‚Ä¢ Errores de suma mental con n√∫meros de dos cifras\n‚Ä¢ Sumar datos de m√∫ltiples series en lugar de una sola\n‚Ä¢ No convertir correctamente de miles a unidades"
          },
          {
            title: "üí™ Consejo de oposici√≥n",
            content: "En gr√°ficos de l√≠neas con m√∫ltiples series: 1) Identifica primero la serie objetivo usando la leyenda, 2) Sigue visualmente esa l√≠nea espec√≠fica, 3) Lee cuidadosamente los valores en cada punto, 4) Verifica que est√°s sumando la serie correcta. Recuerda que los valores est√°n en miles."
          }
        ]
      },
      option_a: '250.000 personas',
      option_b: '220.000 personas',
      option_c: '230.000 personas',
      option_d: '240.000 personas',
      correct_option: 2, // C = 230.000 personas (80+30+70+50 = 230 miles)
      explanation: null, // Se maneja en el componente
      question_subtype: 'line_chart', // Tipo para el switch en PsychometricTestLayout
      difficulty: 'medium',
      time_limit_seconds: 120,
      cognitive_skills: ['chart_reading', 'data_extraction', 'basic_addition', 'series_identification'],
      is_active: true,
      is_verified: true
    }

    console.log('üíæ Insertando pregunta de poblaci√≥n por rango de edad...')

    const { data, error } = await supabase
      .from('psychometric_questions')
      .insert([questionData])
      .select()

    if (error) {
      console.error('‚ùå Error insertando pregunta:', error)
      return
    }

    console.log('‚úÖ Pregunta de poblaci√≥n por rango de edad a√±adida exitosamente')
    console.log('üìù ID:', data[0]?.id)
    console.log('‚úÖ Respuesta correcta: 230.000 personas (80+30+70+50 = 230 miles)')
    console.log('‚ôªÔ∏è  Reutiliza el componente LineChartQuestion existente - no se necesitan cambios')
    console.log('')
    console.log('üîó REVISAR PREGUNTA VISUALMENTE:')
    console.log(`   http://localhost:3000/debug/question/${data[0]?.id}`)
    console.log('')
    console.log('üîó REVISAR DATOS JSON:')
    console.log(`   http://localhost:3000/api/debug/question/${data[0]?.id}`)

    return data[0]?.id

  } catch (error) {
    console.error('‚ùå Error inesperado:', error)
  }
}

insertAgeRangePopulationQuestion()