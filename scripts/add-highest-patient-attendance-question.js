import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Faltan variables de entorno NEXT_PUBLIC_SUPABASE_URL o SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function insertHighestPatientAttendanceQuestion() {
  try {
    console.log('üîç Buscando secci√≥n de gr√°ficos en capacidad administrativa...')
    
    // Buscar la categor√≠a de capacidad administrativa
    const { data: category, error: categoryError } = await supabase
      .from('psychometric_categories')
      .select('*')
      .eq('category_key', 'capacidad-administrativa')
      .single()

    if (categoryError) {
      console.error('‚ùå Error buscando categor√≠a:', categoryError)
      return
    }

    console.log('‚úÖ Categor√≠a encontrada:', category.display_name)

    // Buscar la secci√≥n de gr√°ficos
    const { data: section, error: sectionError } = await supabase
      .from('psychometric_sections')
      .select('*')
      .eq('category_id', category.id)
      .eq('section_key', 'graficos')
      .single()

    if (sectionError) {
      console.error('‚ùå Error buscando secci√≥n:', sectionError)
      return
    }

    console.log('‚úÖ Secci√≥n encontrada:', section.display_name)

    // Datos de la pregunta
    const questionData = {
      category_id: category.id,
      section_id: section.id,
      question_text: '¬øCu√°ntas personas se atendieron en el lugar que tuvo mayor cantidad de pacientes atendidos?',
      content_data: {
        chart_type: 'line_chart',
        chart_title: 'Personas atendidas por rango de edad / lugar de la atenci√≥n (en miles) al mes',
        x_axis_label: 'Lugar de atenci√≥n',
        y_axis_label: 'Personas atendidas (miles)',
        categories: ['Centro salud', 'Hospitales', 'Centros especializados', 'Cl√≠nicas privadas'],
        age_groups: [
          {
            label: 'Edad de 1 mes a 14 a√±os',
            values: [80, 30, 70, 50]
          },
          {
            label: 'Edad de 15 a 39 a√±os', 
            values: [40, 20, 30, 20]
          },
          {
            label: 'Edad de 27 a 64 a√±os',
            values: [70, 60, 50, 90] 
          },
          {
            label: 'De 65 a√±os en adelante',
            values: [100, 100, 95, 35]
          }
        ],
        explanation_sections: [
          {
            title: "üí° ¬øQu√© eval√∫a este ejercicio?",
            content: "Capacidad de leer gr√°ficos de l√≠neas m√∫ltiples, calcular totales por columnas (lugares), comparar resultados y identificar el valor m√°ximo entre diferentes opciones."
          },
          {
            title: "üìä AN√ÅLISIS PASO A PASO:",
            content: "üìã C√°lculo del total por lugar de atenci√≥n:\n‚Ä¢ Centro salud: 80 + 40 + 70 + 100 = 290 (miles)\n‚Ä¢ Hospitales: 30 + 20 + 60 + 100 = 210 (miles)\n‚Ä¢ Centros especializados: 70 + 30 + 50 + 95 = 245 (miles)\n‚Ä¢ Cl√≠nicas privadas: 50 + 20 + 90 + 35 = 195 (miles)\n\nüìã Comparaci√≥n de totales:\n‚Ä¢ Centro salud: 290.000 personas ‚Üê M√ÅXIMO ‚úÖ\n‚Ä¢ Hospitales: 210.000 personas\n‚Ä¢ Centros especializados: 245.000 personas\n‚Ä¢ Cl√≠nicas privadas: 195.000 personas\n\nüìã Respuesta:\n‚Ä¢ El lugar con mayor atenci√≥n: Centro salud\n‚Ä¢ Total de personas atendidas: 290.000"
          },
          {
            title: "‚ö° T√âCNICAS DE AN√ÅLISIS R√ÅPIDO (Para oposiciones)",
            content: "üîç M√©todo 1: Suma visual por columnas\n‚Ä¢ Para cada lugar, suma todos los puntos verticalmente\n‚Ä¢ Centro salud: 80+40+70+100 = 290\n‚Ä¢ Hospitales: 30+20+60+100 = 210\n‚Ä¢ Centros especializados: 70+30+50+95 = 245\n‚Ä¢ Cl√≠nicas privadas: 50+20+90+35 = 195\n\nüìä M√©todo 2: Identificaci√≥n visual r√°pida\n‚Ä¢ Centro salud tiene valores altos en la mayor√≠a de series\n‚Ä¢ Especialmente dominante en series de 1-14 a√±os y 65+\n‚Ä¢ Verificar suma para confirmar\n\nüí∞ M√©todo 3: Descarte de opciones\n‚Ä¢ 290.000 es el m√°s alto de los c√°lculos\n‚Ä¢ Las otras opciones son menores\n‚Ä¢ Verificar que 290 mil corresponde con opci√≥n B"
          },
          {
            title: "‚ùå Errores comunes a evitar",
            content: "‚Ä¢ Confundir las series y sumar horizontalmente (por edad) en lugar de verticalmente (por lugar)\n‚Ä¢ Errores en la suma de n√∫meros de dos cifras\n‚Ä¢ Identificar incorrectamente los puntos de cada serie en cada lugar\n‚Ä¢ No distinguir bien las l√≠neas de colores diferentes\n‚Ä¢ Olvidar convertir de miles a unidades (290 miles = 290.000)\n‚Ä¢ Leer mal la escala del eje Y"
          },
          {
            title: "üí™ Consejo de oposici√≥n",
            content: "Para encontrar m√°ximos en gr√°ficos de l√≠neas m√∫ltiples: 1) Suma verticalmente todos los valores de cada categor√≠a del eje X, 2) Compara los totales obtenidos, 3) Identifica el mayor, 4) Verifica que est√©s leyendo correctamente todas las series. Recuerda que los valores est√°n en miles."
          }
        ]
      },
      option_a: '180.000 pacientes atendidos',
      option_b: '280.000 pacientes atendidos',
      option_c: '200.000 pacientes atendidos',
      option_d: '240.000 pacientes atendidos',
      correct_option: 1, // B = 280.000 (aproximadamente 290.000, la opci√≥n m√°s cercana)
      explanation: null, // Se maneja en el componente
      question_subtype: 'line_chart', // Tipo para el switch en PsychometricTestLayout
      difficulty: 'medium',
      time_limit_seconds: 150,
      cognitive_skills: ['chart_reading', 'data_extraction', 'basic_addition', 'comparison', 'maximum_identification'],
      is_active: true,
      is_verified: true
    }

    console.log('üíæ Insertando pregunta de mayor atenci√≥n de pacientes...')

    const { data, error } = await supabase
      .from('psychometric_questions')
      .insert([questionData])
      .select()

    if (error) {
      console.error('‚ùå Error insertando pregunta:', error)
      return
    }

    console.log('‚úÖ Pregunta de mayor atenci√≥n de pacientes a√±adida exitosamente')
    console.log('üìù ID:', data[0]?.id)
    console.log('‚úÖ Respuesta correcta: 280.000 pacientes (Centro salud: 290.000, opci√≥n m√°s cercana)')
    console.log('‚ôªÔ∏è  Reutiliza el componente LineChartQuestion existente - no se necesitan cambios')
    console.log('')
    console.log('üîó REVISAR PREGUNTA VISUALMENTE:')
    console.log(`   http://localhost:3000/debug/question/${data[0]?.id}`)
    console.log('')
    console.log('üîó REVISAR DATOS JSON:')
    console.log(`   http://localhost:3000/api/debug/question/${data[0]?.id}`)

    return data[0]?.id

  } catch (error) {
    console.error('‚ùå Error inesperado:', error)
  }
}

insertHighestPatientAttendanceQuestion()