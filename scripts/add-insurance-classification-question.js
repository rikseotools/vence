import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://yqbpstxowvgipqspqrgo.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InlxYnBzdHhvd3ZnaXBxc3BxcmdvIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDg3NjcwMywiZXhwIjoyMDY2NDUyNzAzfQ.4yUKsfS-enlY6iGICFkKi-HPqNUyTkHczUqc5kgQB3w'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function addInsuranceClassificationQuestion() {
  try {
    // 1. Obtener la categor√≠a "capacidad-administrativa"
    const { data: category, error: categoryError } = await supabase
      .from('psychometric_categories')
      .select('id, category_key, display_name')
      .eq('category_key', 'capacidad-administrativa')
      .single()
    
    if (categoryError) {
      console.error('‚ùå Error obteniendo categor√≠a:', categoryError)
      return
    }
    console.log('‚úÖ Categor√≠a encontrada:', category.display_name)

    // 2. Obtener la secci√≥n "tablas"
    const { data: section, error: sectionError } = await supabase
      .from('psychometric_sections')
      .select('id, section_key, display_name')
      .eq('category_id', category.id)
      .eq('section_key', 'tablas')
      .single()
    
    if (sectionError) {
      console.error('‚ùå Error obteniendo secci√≥n:', sectionError)
      return
    }
    console.log('‚úÖ Secci√≥n encontrada:', section.display_name)

    // 3. Preparar datos de la pregunta de seguros
    const questionData = {
      category_id: category.id,
      section_id: section.id,
      question_text: 'Clasifique el siguiente seguro seg√∫n los criterios dados:',
      content_data: {
        // Datos del seguro a clasificar
        example_row: {
          cantidad: "1000 EUROS",
          tipo: "VIDA", 
          fecha: "22/10/2016"
        },
        
        // Criterios de clasificaci√≥n
        criteria: [
          {
            column: "Columna A",
            rule: "Seguro de incendios o accidentes, desde 1500 a 4500 euros inclusive, contratado entre el 15 de marzo de 2016 y el 10 de mayo de 2017."
          },
          {
            column: "Columna B", 
            rule: "Seguro de vida o de accidentes, hasta 3000 euros inclusive, contratado entre el 15 de octubre de 2016 y el 20 de agosto de 2017."
          },
          {
            column: "Columna C",
            rule: "Seguro de incendios o de vida, desde 2000 a 5000 euros, inclusive, contratado entre el 10 de febrero de 2016 y el 15 de junio de 2017."
          }
        ],
        
        // Tabla de clasificaci√≥n (para mostrar las opciones)
        classification_table: {
          headers: ["Criterio", "Tipo de seguro", "Rango de euros", "Per√≠odo de contrataci√≥n"],
          rows: [
            ["A", "Incendios o accidentes", "1500-4500 ‚Ç¨", "15/03/2016 - 10/05/2017"],
            ["B", "Vida o accidentes", "Hasta 3000 ‚Ç¨", "15/10/2016 - 20/08/2017"], 
            ["C", "Incendios o vida", "2000-5000 ‚Ç¨", "10/02/2016 - 15/06/2017"],
            ["D", "No cumple ninguna condici√≥n", "-", "-"]
          ]
        },
        
        explanation_sections: [
          {
            title: "üí° ¬øQu√© eval√∫a este ejercicio?",
            content: "Capacidad de aplicar criterios de clasificaci√≥n m√∫ltiples a datos espec√≠ficos, verificando simult√°neamente tipo, cantidad y fecha en condiciones complejas."
          },
          {
            title: "üìä AN√ÅLISIS PASO A PASO:",
            content: "üìã DATOS DEL SEGURO:\n‚úÖ Cantidad: 1000 euros\n‚úÖ Tipo: VIDA\n‚úÖ Fecha: 22/10/2016\n\nüìã VERIFICACI√ìN DE CRITERIOS:\n\n‚ùå CRITERIO A: Incendios o accidentes (1500-4500 ‚Ç¨, 15/03/2016-10/05/2017)\n‚Ä¢ Tipo: ‚ùå Es VIDA (no incendios/accidentes)\n‚Ä¢ Cantidad: ‚ùå 1000 ‚Ç¨ (fuera de rango 1500-4500)\n‚Ä¢ Fecha: ‚ùå 22/10/2016 (fuera de per√≠odo 15/03/2016-10/05/2017)\n\n‚úÖ CRITERIO B: Vida o accidentes (hasta 3000 ‚Ç¨, 15/10/2016-20/08/2017)\n‚Ä¢ Tipo: ‚úÖ Es VIDA (cumple vida o accidentes)\n‚Ä¢ Cantidad: ‚úÖ 1000 ‚Ç¨ (cumple hasta 3000 ‚Ç¨)\n‚Ä¢ Fecha: ‚úÖ 22/10/2016 (cumple 15/10/2016-20/08/2017)\n\n‚úÖ CRITERIO C: Incendios o vida (2000-5000 ‚Ç¨, 10/02/2016-15/06/2017)\n‚Ä¢ Tipo: ‚úÖ Es VIDA (cumple incendios o vida)\n‚Ä¢ Cantidad: ‚ùå 1000 ‚Ç¨ (fuera de rango 2000-5000)\n‚Ä¢ Fecha: ‚ùå 22/10/2016 (fuera de per√≠odo 10/02/2016-15/06/2017)"
          },
          {
            title: "‚ö° T√âCNICAS DE AN√ÅLISIS R√ÅPIDO (Para oposiciones)",
            content: "üîç M√©todo 1: Verificaci√≥n secuencial\n‚Ä¢ Paso 1: Identificar los 3 datos del seguro (cantidad, tipo, fecha)\n‚Ä¢ Paso 2: Para cada criterio, verificar LAS 3 condiciones\n‚Ä¢ Paso 3: Solo es v√°lido si cumple las 3 simult√°neamente\n‚Ä¢ Resultado: Solo B cumple todas las condiciones\n\nüìä M√©todo 2: Descarte r√°pido por tipo\n‚Ä¢ El seguro es de VIDA\n‚Ä¢ Criterio A: ‚ùå requiere incendios/accidentes\n‚Ä¢ Criterio B: ‚úÖ acepta vida\n‚Ä¢ Criterio C: ‚úÖ acepta vida\n‚Ä¢ Luego verificar cantidad y fecha solo en B y C\n\nüí∞ M√©todo 3: Verificaci√≥n por exclusi√≥n\n‚Ä¢ Criterio A: Falla en tipo y cantidad ‚Üí Descartado\n‚Ä¢ Criterio C: Falla en cantidad (1000 < 2000) ‚Üí Descartado\n‚Ä¢ Criterio B: √önicas condiciones que 1000‚Ç¨ VIDA puede cumplir"
          }
        ]
      },
      option_a: 'Criterio A',
      option_b: 'Criterio D', 
      option_c: 'Criterio B',
      option_d: 'Criterio C',
      correct_option: 2, // C = B
      explanation: null, // Se maneja en componente
      question_subtype: 'data_tables', // Tipo para DataTableQuestion.js
      is_active: true
    }

    // 4. Insertar la pregunta
    const { data, error } = await supabase
      .from('psychometric_questions')
      .insert([questionData])
      .select()

    if (error) {
      console.error('‚ùå Error insertando pregunta:', error)
      return
    }

    console.log('‚úÖ Pregunta de clasificaci√≥n de seguros a√±adida exitosamente')
    console.log('üìù ID:', data[0]?.id)
    console.log('‚úÖ Respuesta correcta: C (Criterio B - cumple vida, hasta 3000‚Ç¨, per√≠odo correcto)')
    console.log('‚ôªÔ∏è  Reutiliza el componente DataTableQuestion existente - no se necesitan cambios')
    console.log('')
    console.log('üîó REVISAR PREGUNTA VISUALMENTE:')
    console.log(`   http://localhost:3000/debug/question/${data[0]?.id}`)

  } catch (error) {
    console.error('‚ùå Error general:', error)
  }
}

addInsuranceClassificationQuestion()